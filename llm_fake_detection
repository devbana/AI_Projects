{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":61542,"databundleVersionId":7516023,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Importing Liabraries","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport re\nimport os","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:34:18.048827Z","iopub.execute_input":"2024-05-07T10:34:18.049261Z","iopub.status.idle":"2024-05-07T10:34:18.054969Z","shell.execute_reply.started":"2024-05-07T10:34:18.049229Z","shell.execute_reply":"2024-05-07T10:34:18.053722Z"},"trusted":true},"execution_count":132,"outputs":[]},{"cell_type":"code","source":"%load_ext tensorboard","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:02:35.033054Z","iopub.execute_input":"2024-05-07T11:02:35.033494Z","iopub.status.idle":"2024-05-07T11:02:35.052767Z","shell.execute_reply.started":"2024-05-07T11:02:35.033461Z","shell.execute_reply":"2024-05-07T11:02:35.051547Z"},"trusted":true},"execution_count":163,"outputs":[]},{"cell_type":"markdown","source":"# Loading Data","metadata":{}},{"cell_type":"code","source":"data_path = '/kaggle/input/llm-detect-ai-generated-text'","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:34:18.717848Z","iopub.execute_input":"2024-05-07T10:34:18.718463Z","iopub.status.idle":"2024-05-07T10:34:18.723042Z","shell.execute_reply.started":"2024-05-07T10:34:18.718430Z","shell.execute_reply":"2024-05-07T10:34:18.722260Z"},"trusted":true},"execution_count":133,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv(os.path.join(data_path, 'train_essays.csv'))\ntest_data = pd.read_csv(os.path.join(data_path, 'test_essays.csv'))\nprompt_data = pd.read_csv(os.path.join(data_path, 'train_prompts.csv'))\nsubmission_data = pd.read_csv(os.path.join(data_path, 'sample_submission.csv'))","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:34:19.118733Z","iopub.execute_input":"2024-05-07T10:34:19.119376Z","iopub.status.idle":"2024-05-07T10:34:19.180755Z","shell.execute_reply.started":"2024-05-07T10:34:19.119343Z","shell.execute_reply":"2024-05-07T10:34:19.179631Z"},"trusted":true},"execution_count":134,"outputs":[]},{"cell_type":"code","source":"train_data.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:34:19.620285Z","iopub.execute_input":"2024-05-07T10:34:19.620886Z","iopub.status.idle":"2024-05-07T10:34:19.631661Z","shell.execute_reply.started":"2024-05-07T10:34:19.620856Z","shell.execute_reply":"2024-05-07T10:34:19.630505Z"},"trusted":true},"execution_count":135,"outputs":[{"execution_count":135,"output_type":"execute_result","data":{"text/plain":"         id  prompt_id                                               text  \\\n0  0059830c          0  Cars. Cars have been around since they became ...   \n1  005db917          0  Transportation is a large necessity in most co...   \n2  008f63e3          0  \"America's love affair with it's vehicles seem...   \n3  00940276          0  How often do you ride in a car? Do you drive a...   \n4  00c39458          0  Cars are a wonderful thing. They are perhaps o...   \n\n   generated  \n0          0  \n1          0  \n2          0  \n3          0  \n4          0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt_id</th>\n      <th>text</th>\n      <th>generated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0059830c</td>\n      <td>0</td>\n      <td>Cars. Cars have been around since they became ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>005db917</td>\n      <td>0</td>\n      <td>Transportation is a large necessity in most co...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>008f63e3</td>\n      <td>0</td>\n      <td>\"America's love affair with it's vehicles seem...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>00940276</td>\n      <td>0</td>\n      <td>How often do you ride in a car? Do you drive a...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>00c39458</td>\n      <td>0</td>\n      <td>Cars are a wonderful thing. They are perhaps o...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(train_data.shape)\nprint(test_data.shape)\nprint(prompt_data.shape)\nprint(submission_data.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:05.326782Z","iopub.execute_input":"2024-05-07T10:35:05.327878Z","iopub.status.idle":"2024-05-07T10:35:05.334309Z","shell.execute_reply.started":"2024-05-07T10:35:05.327842Z","shell.execute_reply":"2024-05-07T10:35:05.332954Z"},"trusted":true},"execution_count":137,"outputs":[{"name":"stdout","text":"(1378, 4)\n(3, 3)\n(2, 4)\n(3, 2)\n","output_type":"stream"}]},{"cell_type":"code","source":"(train_data['generated'].value_counts() / train_data.shape[0]) * 100","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:14.326102Z","iopub.execute_input":"2024-05-07T10:35:14.326992Z","iopub.status.idle":"2024-05-07T10:35:14.337998Z","shell.execute_reply.started":"2024-05-07T10:35:14.326951Z","shell.execute_reply":"2024-05-07T10:35:14.336732Z"},"trusted":true},"execution_count":138,"outputs":[{"execution_count":138,"output_type":"execute_result","data":{"text/plain":"generated\n0    99.782293\n1     0.217707\nName: count, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"train_data['generated'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:18.379972Z","iopub.execute_input":"2024-05-07T10:35:18.380408Z","iopub.status.idle":"2024-05-07T10:35:18.391003Z","shell.execute_reply.started":"2024-05-07T10:35:18.380374Z","shell.execute_reply":"2024-05-07T10:35:18.389607Z"},"trusted":true},"execution_count":139,"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"generated\n0    1375\n1       3\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Data is not Balanced","metadata":{}},{"cell_type":"code","source":"train_data['no of words'] = train_data['text'].apply(lambda x: len(str(x).split(' ')))","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:20.432141Z","iopub.execute_input":"2024-05-07T10:35:20.432562Z","iopub.status.idle":"2024-05-07T10:35:20.494896Z","shell.execute_reply.started":"2024-05-07T10:35:20.432531Z","shell.execute_reply":"2024-05-07T10:35:20.493931Z"},"trusted":true},"execution_count":140,"outputs":[]},{"cell_type":"code","source":"train_data['no of words'].mode()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:22.695748Z","iopub.execute_input":"2024-05-07T10:35:22.696186Z","iopub.status.idle":"2024-05-07T10:35:22.704905Z","shell.execute_reply.started":"2024-05-07T10:35:22.696152Z","shell.execute_reply":"2024-05-07T10:35:22.703671Z"},"trusted":true},"execution_count":141,"outputs":[{"execution_count":141,"output_type":"execute_result","data":{"text/plain":"0    468\nName: no of words, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Using Tensorflow Model","metadata":{}},{"cell_type":"code","source":"from nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.utils import to_categorical\nlemaoi = WordNetLemmatizer()\nimport pickle\nimport datetime","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:57:59.664794Z","iopub.execute_input":"2024-05-07T10:57:59.665176Z","iopub.status.idle":"2024-05-07T10:57:59.672826Z","shell.execute_reply.started":"2024-05-07T10:57:59.665148Z","shell.execute_reply":"2024-05-07T10:57:59.671557Z"},"trusted":true},"execution_count":159,"outputs":[]},{"cell_type":"markdown","source":"## Text Preprocessing","metadata":{}},{"cell_type":"code","source":"import string\nimport nltk\nimport re\n\n#Stop words present in the library\nstopwords = nltk.corpus.stopwords.words('english')\ndef pre_processing(text):\n    text_lower = text.lower()\n    text_lower = re.sub('[^a-z0-9 ]','',text_lower)\n    stop_words_free =\" \".join([i for i in text_lower.split(' ') if i not in stopwords])\n    punctuationfree=\"\".join([i for i in stop_words_free if i not in string.punctuation])\n    # lemm_text = [wordnet_lemmatizer.lemmatize(word) for word in punctuationfree.split(' ')]\n    # text_ = ' '.join(lemm_text)\n    # print(stop_words_free)\n    # punctuation_free = re.sub(r'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~', '', stop_words_free)\n    \n    return punctuationfree","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:33.856632Z","iopub.execute_input":"2024-05-07T10:35:33.857016Z","iopub.status.idle":"2024-05-07T10:35:33.866136Z","shell.execute_reply.started":"2024-05-07T10:35:33.856987Z","shell.execute_reply":"2024-05-07T10:35:33.864608Z"},"trusted":true},"execution_count":144,"outputs":[]},{"cell_type":"code","source":"train_data['preprocessed_text'] = train_data['text'].apply(pre_processing)\ntrain_data['no of words'] = train_data['preprocessed_text'].apply(lambda x: len(str(x).split(' ')))","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:35.838159Z","iopub.execute_input":"2024-05-07T10:35:35.838581Z","iopub.status.idle":"2024-05-07T10:35:38.050992Z","shell.execute_reply.started":"2024-05-07T10:35:35.838547Z","shell.execute_reply":"2024-05-07T10:35:38.049777Z"},"trusted":true},"execution_count":145,"outputs":[]},{"cell_type":"code","source":"train_data['no of words'].median()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:41.370527Z","iopub.execute_input":"2024-05-07T10:35:41.371705Z","iopub.status.idle":"2024-05-07T10:35:41.379625Z","shell.execute_reply.started":"2024-05-07T10:35:41.371667Z","shell.execute_reply":"2024-05-07T10:35:41.378451Z"},"trusted":true},"execution_count":146,"outputs":[{"execution_count":146,"output_type":"execute_result","data":{"text/plain":"274.0"},"metadata":{}}]},{"cell_type":"code","source":"num_words = 10000\noov_token = '<UNK>'\npad_type = 'post'\ntrunc_type = 'post'","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:48.222369Z","iopub.execute_input":"2024-05-07T10:35:48.223502Z","iopub.status.idle":"2024-05-07T10:35:48.228327Z","shell.execute_reply.started":"2024-05-07T10:35:48.223453Z","shell.execute_reply":"2024-05-07T10:35:48.227268Z"},"trusted":true},"execution_count":147,"outputs":[]},{"cell_type":"code","source":"X = train_data.preprocessed_text.to_list()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:53.849539Z","iopub.execute_input":"2024-05-07T10:35:53.850161Z","iopub.status.idle":"2024-05-07T10:35:53.854780Z","shell.execute_reply.started":"2024-05-07T10:35:53.850129Z","shell.execute_reply":"2024-05-07T10:35:53.853703Z"},"trusted":true},"execution_count":148,"outputs":[]},{"cell_type":"code","source":"Y = train_data.generated","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:35:56.832579Z","iopub.execute_input":"2024-05-07T10:35:56.833469Z","iopub.status.idle":"2024-05-07T10:35:56.839046Z","shell.execute_reply.started":"2024-05-07T10:35:56.833425Z","shell.execute_reply":"2024-05-07T10:35:56.837807Z"},"trusted":true},"execution_count":149,"outputs":[]},{"cell_type":"code","source":"tokenizer = Tokenizer(num_words=num_words, oov_token=oov_token)\ntokenizer.fit_on_texts(X)\n\n# Get our training data word index\nword_index = tokenizer.word_index\n\n# Encode training data sentences into sequences\ntrain_sequences = tokenizer.texts_to_sequences(X)\n\n# # Get max training sequence length\nmaxlen = max([len(x) for x in train_sequences])\n\n# # Pad the training sequences\ntrain_padded = pad_sequences(train_sequences, padding=pad_type, truncating=trunc_type, maxlen=maxlen)\n\n# # # Output the results of our work\n# print(\"Word index:\\n\", word_index)\n# print(\"\\nTraining sequences:\\n\", train_sequences)\n# print(\"\\nPadded training sequences:\\n\", train_padded)\n# print(\"\\nPadded training shape:\", train_padded.shape)\n# print(\"Training sequences data type:\", type(train_sequences))\n# print(\"Padded Training sequences data type:\", type(train_padded))","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:36:00.240741Z","iopub.execute_input":"2024-05-07T10:36:00.242075Z","iopub.status.idle":"2024-05-07T10:36:00.977007Z","shell.execute_reply.started":"2024-05-07T10:36:00.242031Z","shell.execute_reply":"2024-05-07T10:36:00.975703Z"},"trusted":true},"execution_count":150,"outputs":[]},{"cell_type":"code","source":"x_train, x_test, y_train, y_test = train_test_split(train_padded,Y,test_size=0.3, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:36:03.133077Z","iopub.execute_input":"2024-05-07T10:36:03.133996Z","iopub.status.idle":"2024-05-07T10:36:03.141267Z","shell.execute_reply.started":"2024-05-07T10:36:03.133961Z","shell.execute_reply":"2024-05-07T10:36:03.140338Z"},"trusted":true},"execution_count":151,"outputs":[]},{"cell_type":"code","source":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T10:36:04.063627Z","iopub.execute_input":"2024-05-07T10:36:04.064378Z","iopub.status.idle":"2024-05-07T10:36:04.070927Z","shell.execute_reply.started":"2024-05-07T10:36:04.064341Z","shell.execute_reply":"2024-05-07T10:36:04.069496Z"},"trusted":true},"execution_count":152,"outputs":[{"name":"stdout","text":"(964, 882)\n(414, 882)\n(964,)\n(414,)\n","output_type":"stream"}]},{"cell_type":"code","source":"fake_detection = models.Sequential()\nfake_detection.add(layers.Embedding(num_words, 40))\nfake_detection.add(layers.SpatialDropout1D(0.2))\nfake_detection.add(layers.LSTM(50))\nfake_detection.add(layers.Dense(1, activation='sigmoid'))\nprint(fake_detection.summary())","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:05:50.253350Z","iopub.execute_input":"2024-05-07T11:05:50.253768Z","iopub.status.idle":"2024-05-07T11:05:50.288373Z","shell.execute_reply.started":"2024-05-07T11:05:50.253738Z","shell.execute_reply":"2024-05-07T11:05:50.287263Z"},"trusted":true},"execution_count":167,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_5\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_5\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_4 (\u001b[38;5;33mEmbedding\u001b[0m)         │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d_4             │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mSpatialDropout1D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_4 (\u001b[38;5;33mLSTM\u001b[0m)                   │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d_4             │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ lstm_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"None\n","output_type":"stream"}]},{"cell_type":"code","source":"fake_detection.compile(optimizer='adam',loss='binary_crossentropy',metrics=['acc'])","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:05:54.984862Z","iopub.execute_input":"2024-05-07T11:05:54.985498Z","iopub.status.idle":"2024-05-07T11:05:54.995971Z","shell.execute_reply.started":"2024-05-07T11:05:54.985466Z","shell.execute_reply":"2024-05-07T11:05:54.994306Z"},"trusted":true},"execution_count":168,"outputs":[]},{"cell_type":"code","source":"log_dir = \"logs/fakedetection/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:06:16.527093Z","iopub.execute_input":"2024-05-07T11:06:16.527553Z","iopub.status.idle":"2024-05-07T11:06:16.533465Z","shell.execute_reply.started":"2024-05-07T11:06:16.527521Z","shell.execute_reply":"2024-05-07T11:06:16.532278Z"},"trusted":true},"execution_count":170,"outputs":[]},{"cell_type":"code","source":"fake_detection.fit(x_train,y_train,batch_size=50,epochs=10,callbacks=[tensorboard_callback])","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:06:18.551697Z","iopub.execute_input":"2024-05-07T11:06:18.552058Z","iopub.status.idle":"2024-05-07T11:07:49.705270Z","shell.execute_reply.started":"2024-05-07T11:06:18.552031Z","shell.execute_reply":"2024-05-07T11:07:49.704008Z"},"trusted":true},"execution_count":171,"outputs":[{"name":"stdout","text":"Epoch 1/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 364ms/step - acc: 0.8254 - loss: 0.4487\nEpoch 2/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 373ms/step - acc: 0.9988 - loss: 0.0148\nEpoch 3/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 378ms/step - acc: 0.9950 - loss: 0.0331\nEpoch 4/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 376ms/step - acc: 0.9987 - loss: 0.0098\nEpoch 5/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 374ms/step - acc: 0.9988 - loss: 0.0091\nEpoch 6/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 371ms/step - acc: 0.9973 - loss: 0.0190\nEpoch 7/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 385ms/step - acc: 0.9983 - loss: 0.0125\nEpoch 8/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 375ms/step - acc: 0.9993 - loss: 0.0063\nEpoch 9/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 372ms/step - acc: 0.9968 - loss: 0.0219\nEpoch 10/10\n\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 380ms/step - acc: 0.9984 - loss: 0.0124\n","output_type":"stream"},{"execution_count":171,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x787bac20e890>"},"metadata":{}}]},{"cell_type":"code","source":"%tensorboard --logdir logs","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:08:05.252453Z","iopub.execute_input":"2024-05-07T11:08:05.252879Z","iopub.status.idle":"2024-05-07T11:08:11.277302Z","shell.execute_reply.started":"2024-05-07T11:08:05.252845Z","shell.execute_reply":"2024-05-07T11:08:11.276107Z"},"trusted":true},"execution_count":172,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n      <iframe id=\"tensorboard-frame-b3566bc81d6cbcc1\" width=\"100%\" height=\"800\" frameborder=\"0\">\n      </iframe>\n      <script>\n        (function() {\n          const frame = document.getElementById(\"tensorboard-frame-b3566bc81d6cbcc1\");\n          const url = new URL(\"/\", window.location);\n          const port = 6007;\n          if (port) {\n            url.port = port;\n          }\n          frame.src = url;\n        })();\n      </script>\n    "},"metadata":{}}]},{"cell_type":"code","source":"fake_detection.evaluate(x_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:13:08.724591Z","iopub.execute_input":"2024-05-07T11:13:08.724993Z","iopub.status.idle":"2024-05-07T11:13:10.405679Z","shell.execute_reply.started":"2024-05-07T11:13:08.724964Z","shell.execute_reply":"2024-05-07T11:13:10.404850Z"},"trusted":true},"execution_count":176,"outputs":[{"name":"stdout","text":"\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 101ms/step - acc: 0.9982 - loss: 0.0132\n","output_type":"stream"},{"execution_count":176,"output_type":"execute_result","data":{"text/plain":"[0.017057057470083237, 0.9975845217704773]"},"metadata":{}}]},{"cell_type":"code","source":"test_data","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:29:51.420693Z","iopub.execute_input":"2024-05-07T11:29:51.421114Z","iopub.status.idle":"2024-05-07T11:29:51.432636Z","shell.execute_reply.started":"2024-05-07T11:29:51.421085Z","shell.execute_reply":"2024-05-07T11:29:51.431402Z"},"trusted":true},"execution_count":186,"outputs":[{"execution_count":186,"output_type":"execute_result","data":{"text/plain":"         id  prompt_id          text\n0  0000aaaa          2  Aaa bbb ccc.\n1  1111bbbb          3  Bbb ccc ddd.\n2  2222cccc          4  CCC ddd eee.","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>prompt_id</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0000aaaa</td>\n      <td>2</td>\n      <td>Aaa bbb ccc.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1111bbbb</td>\n      <td>3</td>\n      <td>Bbb ccc ddd.</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2222cccc</td>\n      <td>4</td>\n      <td>CCC ddd eee.</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data['preprocessed_text'] = test_data['text'].apply(pre_processing)\n# test_prediction = fake_detection.predict()","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:29:59.122431Z","iopub.execute_input":"2024-05-07T11:29:59.122800Z","iopub.status.idle":"2024-05-07T11:29:59.308590Z","shell.execute_reply.started":"2024-05-07T11:29:59.122773Z","shell.execute_reply":"2024-05-07T11:29:59.307021Z"},"trusted":true},"execution_count":187,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[187], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m test_data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpreprocessed_text\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mtest_data\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtext\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpre_processing\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m# test_prediction = fake_detection.predict()\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/series.py:4924\u001b[0m, in \u001b[0;36mSeries.apply\u001b[0;34m(self, func, convert_dtype, args, by_row, **kwargs)\u001b[0m\n\u001b[1;32m   4789\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\n\u001b[1;32m   4790\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   4791\u001b[0m     func: AggFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4796\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   4797\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[1;32m   4798\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4799\u001b[0m \u001b[38;5;124;03m    Invoke function on values of Series.\u001b[39;00m\n\u001b[1;32m   4800\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4915\u001b[0m \u001b[38;5;124;03m    dtype: float64\u001b[39;00m\n\u001b[1;32m   4916\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m   4917\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mSeriesApply\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   4918\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4919\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4920\u001b[0m \u001b[43m        \u001b[49m\u001b[43mconvert_dtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4921\u001b[0m \u001b[43m        \u001b[49m\u001b[43mby_row\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mby_row\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4922\u001b[0m \u001b[43m        \u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   4923\u001b[0m \u001b[43m        \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m-> 4924\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1427\u001b[0m, in \u001b[0;36mSeriesApply.apply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1424\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_compat()\n\u001b[1;32m   1426\u001b[0m \u001b[38;5;66;03m# self.func is Callable\u001b[39;00m\n\u001b[0;32m-> 1427\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_standard\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/apply.py:1507\u001b[0m, in \u001b[0;36mSeriesApply.apply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1501\u001b[0m \u001b[38;5;66;03m# row-wise access\u001b[39;00m\n\u001b[1;32m   1502\u001b[0m \u001b[38;5;66;03m# apply doesn't have a `na_action` keyword and for backward compat reasons\u001b[39;00m\n\u001b[1;32m   1503\u001b[0m \u001b[38;5;66;03m# we need to give `na_action=\"ignore\"` for categorical data.\u001b[39;00m\n\u001b[1;32m   1504\u001b[0m \u001b[38;5;66;03m# TODO: remove the `na_action=\"ignore\"` when that default has been changed in\u001b[39;00m\n\u001b[1;32m   1505\u001b[0m \u001b[38;5;66;03m#  Categorical (GH51645).\u001b[39;00m\n\u001b[1;32m   1506\u001b[0m action \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(obj\u001b[38;5;241m.\u001b[39mdtype, CategoricalDtype) \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1507\u001b[0m mapped \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_map_values\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1508\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmapper\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurried\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\n\u001b[1;32m   1509\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1511\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(mapped) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(mapped[\u001b[38;5;241m0\u001b[39m], ABCSeries):\n\u001b[1;32m   1512\u001b[0m     \u001b[38;5;66;03m# GH#43986 Need to do list(mapped) in order to get treated as nested\u001b[39;00m\n\u001b[1;32m   1513\u001b[0m     \u001b[38;5;66;03m#  See also GH#25959 regarding EA support\u001b[39;00m\n\u001b[1;32m   1514\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39m_constructor_expanddim(\u001b[38;5;28mlist\u001b[39m(mapped), index\u001b[38;5;241m=\u001b[39mobj\u001b[38;5;241m.\u001b[39mindex)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/base.py:921\u001b[0m, in \u001b[0;36mIndexOpsMixin._map_values\u001b[0;34m(self, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m    918\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(arr, ExtensionArray):\n\u001b[1;32m    919\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mmap(mapper, na_action\u001b[38;5;241m=\u001b[39mna_action)\n\u001b[0;32m--> 921\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43malgorithms\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_action\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/algorithms.py:1743\u001b[0m, in \u001b[0;36mmap_array\u001b[0;34m(arr, mapper, na_action, convert)\u001b[0m\n\u001b[1;32m   1741\u001b[0m values \u001b[38;5;241m=\u001b[39m arr\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m   1742\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m na_action \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1743\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_infer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmapper\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1744\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1745\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mmap_infer_mask(\n\u001b[1;32m   1746\u001b[0m         values, mapper, mask\u001b[38;5;241m=\u001b[39misna(values)\u001b[38;5;241m.\u001b[39mview(np\u001b[38;5;241m.\u001b[39muint8), convert\u001b[38;5;241m=\u001b[39mconvert\n\u001b[1;32m   1747\u001b[0m     )\n","File \u001b[0;32mlib.pyx:2972\u001b[0m, in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","Cell \u001b[0;32mIn[144], line 10\u001b[0m, in \u001b[0;36mpre_processing\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m      8\u001b[0m text_lower \u001b[38;5;241m=\u001b[39m text\u001b[38;5;241m.\u001b[39mlower()\n\u001b[1;32m      9\u001b[0m text_lower \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[^a-z0-9 ]\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m,text_lower)\n\u001b[0;32m---> 10\u001b[0m stop_words_free \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin([i \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m text_lower\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mif\u001b[39;00m i \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m stopwords])\n\u001b[1;32m     11\u001b[0m punctuationfree\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin([i \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m stop_words_free \u001b[38;5;28;01mif\u001b[39;00m i \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m string\u001b[38;5;241m.\u001b[39mpunctuation])\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# lemm_text = [wordnet_lemmatizer.lemmatize(word) for word in punctuationfree.split(' ')]\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# text_ = ' '.join(lemm_text)\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# print(stop_words_free)\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# punctuation_free = re.sub(r'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~', '', stop_words_free)\u001b[39;00m\n","Cell \u001b[0;32mIn[144], line 10\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      8\u001b[0m text_lower \u001b[38;5;241m=\u001b[39m text\u001b[38;5;241m.\u001b[39mlower()\n\u001b[1;32m      9\u001b[0m text_lower \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m[^a-z0-9 ]\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m,text_lower)\n\u001b[0;32m---> 10\u001b[0m stop_words_free \u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin([i \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m text_lower\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mif\u001b[39;00m \u001b[43mi\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mstopwords\u001b[49m])\n\u001b[1;32m     11\u001b[0m punctuationfree\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin([i \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m stop_words_free \u001b[38;5;28;01mif\u001b[39;00m i \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m string\u001b[38;5;241m.\u001b[39mpunctuation])\n\u001b[1;32m     12\u001b[0m \u001b[38;5;66;03m# lemm_text = [wordnet_lemmatizer.lemmatize(word) for word in punctuationfree.split(' ')]\u001b[39;00m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# text_ = ' '.join(lemm_text)\u001b[39;00m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# print(stop_words_free)\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# punctuation_free = re.sub(r'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~', '', stop_words_free)\u001b[39;00m\n","\u001b[0;31mTypeError\u001b[0m: argument of type 'WordListCorpusReader' is not iterable"],"ename":"TypeError","evalue":"argument of type 'WordListCorpusReader' is not iterable","output_type":"error"}]},{"cell_type":"code","source":"prompt_data","metadata":{"execution":{"iopub.status.busy":"2024-05-07T11:08:58.475315Z","iopub.execute_input":"2024-05-07T11:08:58.475736Z","iopub.status.idle":"2024-05-07T11:08:58.488161Z","shell.execute_reply.started":"2024-05-07T11:08:58.475704Z","shell.execute_reply":"2024-05-07T11:08:58.486758Z"},"trusted":true},"execution_count":175,"outputs":[{"execution_count":175,"output_type":"execute_result","data":{"text/plain":"   prompt_id                       prompt_name  \\\n0          0                   Car-free cities   \n1          1  Does the electoral college work?   \n\n                                        instructions  \\\n0  Write an explanatory essay to inform fellow ci...   \n1  Write a letter to your state senator in which ...   \n\n                                         source_text  \n0  # In German Suburb, Life Goes On Without Cars ...  \n1  # What Is the Electoral College? by the Office...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prompt_id</th>\n      <th>prompt_name</th>\n      <th>instructions</th>\n      <th>source_text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Car-free cities</td>\n      <td>Write an explanatory essay to inform fellow ci...</td>\n      <td># In German Suburb, Life Goes On Without Cars ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Does the electoral college work?</td>\n      <td>Write a letter to your state senator in which ...</td>\n      <td># What Is the Electoral College? by the Office...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}